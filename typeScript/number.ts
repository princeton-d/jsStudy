// 브라우저들은 타입스크립트를 이해하지 못한다. 그렇기 때문에 타입스크립트로 작성된 파일을 자바스크립트로 변환한 후 브라우저에서 실행한다.
// 그렇다면 왜 타입스크립트를 사용할까? 아래의 예제를 살펴보도록 하자.

// const add = (num1, num2) => {
//   console.log(num1 + num2)
// }
// add()
// add(1)
// add(1, 2)
// add(3, 4, 5)
// add('hello', "world")

// 아무런 값도 주지 않았기에 NaN이 출력되고
// 인자를 하나만 전달하면 1과 undefined를 더하기 때문에 NaN이 출력되고
// 1과 2를 더하면 우리가 원하는 3이라는 결과가 나오고
// 3과 4와 5를 더하면 7이 나오는 것이 아니라 3과 4만 더해주기 때문에 7이 나오고
// 문자열을 더해주어도 문자열이 더해져서 출력된다.
// 얼핏보면 문제가 없어보이지만 예상과 다른 결과가 출력된다면 어디서 오류가 발생하는지 찾아내기가 상당히 어려운 부분이라고 할 수 있다.

// 자바스크립트는 동적언어로 런타임에서 타입이 결정되고 그때 문제가 있으면 오류를 발생시킨다.
// 타입스크립트는 정적언어로 컴파일 타임에 타입이 결정되고 그때 오류를 발견하게 된다. 코드작성 시간이 길어지겠지만 초기에 생각을 많이 해서 작성한다면 안정적인 개발이 가능하다.

// const add = (num1: number, num2: number) => {
//   console.log(num1 + num2);
// };
// add();
// add(1);
// add(1, 2);
// add(3, 4, 5);
// add('hello', 'world');

// 함수를 선언할 때 num1과 num2의 타입을 정해주지 않으면 any라는 타입이 기본으로 설정되는데 어떤 값이 올지 모른다는 뜻이다. 가급적이면 any타입은 사용하지 않도록 한다. 지금은 숫자열을 받아와야 하는 상황이므로 num1:number 라고 입력해 타입을 지정해주도록 한다.
// 타입을 지정해준 후 타입스크립트 환경에서 위 코드를 본다면 다음과 같은 오류가 발생한다.
// add() -> 2개의 인수가 필요한데 0개를 가져왔습니다.
// add(1) -> 2개의 인수가 필요한데 1개를 가져왔습니다.
// add(1, 2) -> 정상적으로 작동
// add(3, 4, 5) -> 2개의 인수가 필요한데 3개를 가져왔습니다.
// add('hello', "world") -> 'string' 형식의 인수는 'number' 형식의 매개 변수에 할당될 수 없습니다.

// 마찬가지로 다른 예제에서도 문제를 파악해볼 수 있다.

// const showItems = (arr) => {
//   arr.forEach(item => {
//     console.log(item)
//   });
// }
// showItems([1, 2, 3]);
// showItems(1, 2, 3);

// 자바스크립트에서 실행한 위 함수는 [1, 2, 3]을 인자로 주었을때는 문제없이 출력이 되지만 1, 2, 3을 인자로 줬을때는 forEach는 매개변수로 숫자열을 받을 수 없기때문에 런타임 환경에서 오류가 발생한다.

// const showItems = (arr: number[]) => {
//   arr.forEach((item) => {
//     console.log(item);
//   });
// };
// showItems([1, 2, 3]);
// showItems(1, 2, 3);

// 타입스크립트에서는 위 함수에 타입을 정해줄 때 숫자배열을 지정해줘야 함으로 :number[] 라고 지정해줘야한다.
// 타입을 그냥 :number 만 입력해준다면 'number' 형식에 'forEach' 속성이 없습니다. 라는 오류 메세지를 출력해준다.
