/*
7.1 산술 연산자
  산술 연산자는 피연산자를 대상으로 수학적인 계산을 통해 새로운 숫자 값을 만들어낸다.
  산술 연산이 불가능하다면 NaN 을 반환한다.
  산술 연산자는 피연산자의 개수에 따라서 이항 산술 연산자와 단항 산술 연산자로 구분할 수 있다.
    7.1.1 이항 산술 연산자
      이항 산술 연산자는 2개의 피연산자를 산술 연산하여 숫자 값을 만든다.
      모든 이항 산술 연산자는 피연산자의 값을 변경하는 부수 효과가 없다.
      어떤 산술 연산을 해도 피연산자의 값이 바뀌는 경우는 없고 언제나 새로운 값을 만든다.
        이항 산술 연산자: +(덧셈), -(뺄셈), *(곱셈), /(나눗셈), %(나머지)

    7.1.2 단항 산술 연산자
      단항 산술 연산자는 1개의 피연산자를 산술 연산하여 숫자 값을 만든다.
        단항 산술 연산자: ++(증가, 부수효과O), --(감소, 부수효과O), +(아무 효과도 없다.), -(양수를 음수로, 음수를 양수로 반전한 값을 반환한다.)
        
      단항 산술 연산자의 ++(증가)와 --(감소)연산자는 피연산자의 값을 변경하는 부수효과가 있다.
      증가나 감소 연산을 하면 피연산자의 값을 변경하는 암묵적인 할당이 이루어진다.
      추가로 증가, 감소 연산자는 위치에 따라 의미가 다르다.
        피연산자 앞에 위치한 증가, 감소 연산자는 먼저 피연산자의 값을 증가/감소시킨 후, 다음 연산을 수행한다.
        피연산자 뒤에 위치한 증가, 감소 연산자는 먼저 연산을 수행한 후, 피연산자의 값을 증가/감소시킨다.

      숫자 타입이 아닌 피연산자에 + 단항 연산자를 사용하면 피연산자를 숫자 타입으로 변환하여 반환한다.
        let x = '1';
        console.log(+x) // 1 -> 문자열을 숫자로 타입 변환한다.
        let x = true;
        console.log(+x) // 1 -> 불리언 값을 숫자로 타입 변환한다.
        let x = false;
        console.log(+x) // 0 -> 불리언 값을 숫자로 타입 변환한다.
        let x = 'hello';
        console.log(+x) // NaN -> 문자열은 숫자로 타입 변환할 수 없으므로 NaN 을 반환한다.

      -단항 연산자는 피연산자의 부호를 반전한 값을 반환한다.
      +단항 연산자와 마찬가지로 숫자 타입이 아닌 피연산자에 사용하면 피연산자를 숫자 타입으로 변환하여 반환한다.
      피연산자를 변경하는 것은 아니고 부호를 반전한 값을 생성해 반환한다. 즉 부수효과는 없다.
        -(-10); // 10 -> 부호를 반전한다.
        -'10' // -10 -> 문자열을 숫자로 타입 변환한다.
        -true // -1 -> 불리언 값을 숫자로 타입 변환한다.
        -'hello' // NaN -> 문자열은 타입 변환할 수 없으므로 NaN 을 반환한다.
    
    7.1.3 문자열 연결 연산자
      + 연산자는 피연산자 중 하나 이상이 문자열인 경우 문자열 연결 연산자로 동작한다.
      그 외의 경우는 산술 연산자로 동작한다.
        // 문자열 연결 연산자
          '1' + 2 // '12'
          1 + '2' // '12'

        // 산술 연산자
          1 + 2 // 3
        
        // true 는 1 로 타입 변환된다
          1 + true // 2

        // false 는 0 으로 타입 변환된다.
          1 + false // 1
        
        // null 은 0으로 타입 변환된다.
          1 + null // 1

        // undefined 는 숫자로 타입 변환되지 않는다.
          +undefined // NaN
          1 + undefined // NaN

      조심해야 할 것은 개발자의 의도와 상관없이 자바스크립트 엔진에 의해서 암묵적으로 타입이 변환하게 되기도 한다.
      1 + true 를 연산하면 자바스크립트 엔진은 암묵적으로 불리언 타입의 값인 true 를 1로 강제로 변환하고 연산을 수행한다.
      이를 암묵적 타입 변환 또는 타입 강제 변환 이라고 한다.
      이런 암묵적 타입 변환은 예상하지 못한 버그를 일으킬 수 있다.
*/